/* Данный Заголовочный файл содержит объявления (прототипы) функций,
которые используются для построения дискретного аналога расчётной области.
В данной версии этот модуль строит равномерные сетки по пространству и времени. */

#ifndef __MESH_HPP__
#define __MESH_HPP__
#include "my_types.hpp"

//Проверяет корректность динамического выделения памяти.
void checkMemAlloc(void *pointer, const char *ErrMsg);

//Заполняет массив с координатами граней контрольных объёмов.
//Грани расположены с одинаковым удалением друг от друга на всей области.
double * getUniformFaces(double len, uns Nv) 

//Заполняет массив с расстояниями между соседними узловыми гранями.
double * getFacesIntervals(double *xf, uns Np);

//Заполняет массив с координатами контрольных точек.
//Каждая точка располагается в центре контрольного объёма.
double * getUniformNodes(double *xf, double len, uns Np);

//Заполняет массив с расстояниями между соседними узловыми точками.
double * getNodesIntervals(double *x, uns Np);

//Заполняет массив с шагом по времени для каждого слоя (равномерный).
double * getUniformArray_dt(double T_end, uns Nt);

//Заполняет массив со значениями временных слоёв.
double * getArray_cur_t(double *dt, uns Nt);

//Формирует равномерную расчётную сетку.
//Заполняются массивы: граней, узловых точек, временных слоёв,
//расстояний между гранями, расстояний между узловыми точками.
//Вычисляются раномерные шаги по времени.
void getUniformMesh(discrMesh &mesh);

//Функция для освобождения выделенных участков памяти.
void freeMesh(discrMesh &mesh);
#endif
